name: Build & test qemu on each push to master

# WARNING: DO NOT EDIT THIS FILE!
#
# This file is autogenerated using `scripts/generate-workflows.sh`, and all changes to it will be lost.
#   All workflows are located in `.github/templates/`.  Workflows must not start with an underscore.
#       All jobs (re-)used in workflows must be located in the same directory, and must start with an underscore.
#       Indentation of all parts is preserved, so it must be correct.
#

on:
  push:
    branches:
    - master

jobs:
  build:
    name: Build all images & upload them as build artifacts
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1.0.0

      - name: Extract essence from built-architectures.txt
        run: sed -i  -e 's/\s*#.*$//'  -e '/^\s*$/d'  ./built-architectures.txt

      - name: Build base image
        run: >
          DOCKER_BUILDKIT=1 docker build .
          --build-arg QEMU_VERSION=v3.1.0
          --tag       midstate
          --file      Dockerfile
          --target    builder

      - name: Build :enable image
        run: >
          DOCKER_BUILDKIT=1 docker build .
          --build-arg QEMU_VERSION=v3.1.0
          --tag       simple-qemu:enable
          --file      Dockerfile
          --target    enable

      - name: Build :<single-arch> images
        run: |
          for arch in $(cat built-architectures.txt); do
            echo "Building simple-qemu:${arch}…"
            DOCKER_BUILDKIT=1 docker build . \
              --build-arg QEMU_VERSION=v3.1.0 \
              --build-arg ARCH=${arch} \
              --tag       simple-qemu:${arch} \
              --file      Dockerfile \
              --target    single
          done

      - name: Build :v3.1.0 (all-included) image
        run: >
          DOCKER_BUILDKIT=1 docker build .
          --build-arg QEMU_VERSION=v3.1.0
          --tag       simple-qemu:v3.1.0
          --file      Dockerfile
          --target    comprehensive

      - name: List all built images
        run: docker images simple-qemu

      - name: Save all images to .tgz files
        run: |
          mkdir -p images/
          for image in $(docker images simple-qemu --format "{{.Repository}}:{{.Tag}}"); do
            FILENAME="$(echo "${image}" | tr : -)"
            docker save "${image}" | gzip > "images/${FILENAME}.tgz"
          done

      - name: Print sha256sum of all images
        run: sha256sum images/*

      - name: Upload built images
        uses: actions/upload-artifact@v1.0.0
        with:
          name: images
          path: images/

      - name: Extract qemu binaries from built image
        run: |
          mkdir -p binaries/
          ID=$(docker create midstate)
          docker cp  "${ID}:/binaries/"  .
          docker rm "${ID}"
          gzip -S "-v3.1.0.gz" binaries/*

      - name: Print sha256sum of all binaries
        run: sha256sum binaries/*

      - name: Upload built binaries
        uses: actions/upload-artifact@v1.0.0
        with:
          name: binaries
          path: binaries/

  test:
    name: Test if running arch-specific images works
    runs-on: ubuntu-18.04
    needs: build
    strategy:
      matrix:
        arch:
          - arm
          - aarch64
#          - riscv32 # Nothing to test it against…
          - riscv64
    steps:
      - uses: actions/checkout@v1

      - name: Download all build artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: images

      - name: Print sha256sum of all images
        run: sha256sum images/*

      - name: Load relevant image locally
        run: docker load -i "images/simple-qemu-${{ matrix.arch }}.tgz"

      - name: Enable emulation
        run: docker run --rm --privileged "simple-qemu:${{ matrix.arch }}" -p yes

      - name: Try to run arch-specific image
        run: |
          IMAGE="${{ matrix.arch }}/alpine"

          if [[ "${{ matrix.arch }}" == "riscv64" ]]; then
            IMAGE="carlosedp/debian:sid-riscv64"
          fi

          if [[ "${{ matrix.arch }}" == "arm" ]]; then
            IMAGE="arm32v7/alpine"
          fi

          docker run ${IMAGE} uname -a

      - name: Verify that git tag build is the same as used for build
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          GIT_VER="$(echo ${GITHUB_REF} | awk -F/ '{print $NF}')"

          if [ "${GIT_VER}" != "v3.1.0" ]; then
            printf "\nVersion mismatch!  Tagged as %s, while file claims %s\n\n" "${GIT_VER}" "v3.1.0"
            exit 1
          fi
