name: Build & deploy on git tag push

env:
  APP: simple-qemu

on:
  push:
    tags: [ '*' ]

jobs:
  build:
    name: Build all qemu images
    runs-on: ubuntu-18.04

    env:
      DOCKER_BUILDKIT: 1

    steps:
      - uses: actions/checkout@v2

      # Setup environment
      # TAG  => vX.Y.Z[.P]+build<BUILD>
      - name: Setup environment
        run: |
          TAG="${GITHUB_REF#refs/tags/}"

          if ! echo "$TAG" | grep -qE '^v(.?[0-9]+){3,4}\+build[0-9]+$'; then
            >&2 echo "ERR: TAG must be in format: vX.Y.Z[.P]+buildNUMBER"
            exit 1
          fi

          echo ::set-env name=TAG::"$TAG"
          echo ::set-env name=VERSION::"${TAG%+*}"
          echo ::set-env name=BUILD::"${TAG#*build}"

      # NOTE: This is also handled within Dockerfile, we *also* do it here,
      #         because of the step building single-arch images below.
      - name: Extract essence from built-architectures.txt
        run: sed -i  -e 's/\s*#.*$//'  -e '/^\s*$/d'  ./built-architectures.txt

      - name: Print ENV VARs set above
        run: |
          printf "    APP: %s\n"  "$APP"
          printf "    TAG: %s\n"  "$TAG"
          printf "VERSION: %s\n"  "$VERSION"
          printf "  BUILD: %s\n"  "$BUILD"
          printf "  archs: %s\n"  "$(cat ./built-architectures.txt | tr '\n' ' ')"

      - name: Build base image
        run: >
          docker build --no-cache .
          --target    builder
          --build-arg "VERSION=$VERSION"
          --tag       midstate

      - name: Package :enable image
        run: >
          docker build .
          --target    enable
          --build-arg "VERSION=$VERSION"
          --label     "commit=${{ github.sha }}"
          --label     "git-tag=$TAG"
          --label     "build=$BUILD"
          --label     "guilty=${{ github.actor }}"
          --label     "repo-url=${{ github.repositoryUrl }}"
          --tag       "$APP:enable"

      - name: Package :comprehensive image
        run: >
          docker build .
          --target    comprehensive
          --build-arg "VERSION=$VERSION"
          --label     "commit=${{ github.sha }}"
          --label     "git-tag=$TAG"
          --label     "build=$BUILD"
          --label     "guilty=${{ github.actor }}"
          --label     "repo-url=${{ github.repositoryUrl }}"
          --tag       "$APP:$VERSION"

      - name: Package :<single-arch> images
        run: |
          for arch in $(cat built-architectures.txt); do
            echo "Building $APP:${arch}…"
            docker build . \
              --target    single \
              --build-arg "VERSION=$VERSION" \
              --build-arg "ARCH=$arch" \
              --label     "commit=${{ github.sha }}" \
              --label     "git-tag=$TAG" \
              --label     "build=$BUILD" \
              --label     "guilty=${{ github.actor }}" \
              --label     "repo-url=${{ github.repositoryUrl }}" \
              --tag       "$APP:$arch"
          done

      - name: List all built images
        run: docker images "$APP"

      - name: Save all images to .tgz files
        run: |
          mkdir -p images/
          for image in $(docker images "$APP" --format "{{.Tag}}"); do
            docker save "$APP:$image" | gzip > "images/$APP-$image.tgz"
          done

      - name: Print sha256sum of all images
        run: sha256sum images/*

      - name: Upload built images
        uses: actions/upload-artifact@v1.0.0
        with:
          name: docker-images
          path: images/


  test:
    name: Test if running arch-specific images works
    runs-on: ubuntu-18.04
    needs: build

    strategy:
      matrix:
        arch:
          - arm
          - aarch64
          - riscv64
#          - riscv32 # Nothing to test it against…

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: docker-images

      - name: Print sha256sum of all images
        run: sha256sum docker-images/*

      - name: Load relevant image locally
        run: docker load -i "docker-images/$APP-${{ matrix.arch }}.tgz"

      - name: Enable emulation
        run: docker run --rm --privileged "$APP:${{ matrix.arch }}" -p yes

      - name: Try to run riscv64 image
        if: matrix.arch == 'riscv64'
        run: docker run carlosedp/debian:sid-riscv64 uname -a

      - name: Try to run arm32v7 image
        if: matrix.arch == 'arm'
        run: docker run arm32v7/alpine uname -a

      - name: Try to run arch-specific image
        if: matrix.arch != 'riscv64' && matrix.arch != 'arm'
        run: docker run ${{ matrix.arch }}/alpine uname -a


  deploy:
    name: Deploy to Docker Hub & Github Releases.  Only after successful build and test.

    runs-on: ubuntu-18.04
    needs: test
    steps:
      - name: Setup environment
        run: |
          echo ::set-env name=SLUG::"${GITHUB_REPOSITORY,,}"

          TAG="${GITHUB_REF#refs/tags/}"
          echo ::set-env name=TAG::"$TAG"
          echo ::set-env name=VERSION::"${TAG%+*}"
          echo ::set-env name=BUILD::"${TAG#*build}"

      - name: Print just set ENV VARs
        run: |
          printf "    APP: %s\n"  "$APP"
          printf "    TAG: %s\n"  "$TAG"
          printf "   SLUG: %s\n"  "$SLUG"
          printf "VERSION: %s\n"  "$VERSION"
          printf "  BUILD: %s\n"  "$BUILD"

      - name: Download images built in build job
        uses: actions/download-artifact@v1.0.0
        with:
          name: docker-images

      - name: Print sha256sum of downloaded images
        run: sha256sum docker-images/*

      - name: Load images locally
        run: ls -d docker-images/* | xargs -I %  docker load -i "%"

      - name: Create arch aliases
        run: |
          docker tag  "$APP:arm"      "$APP:arm32v7"
          docker tag  "$APP:aarch64"  "$APP:arm64v8"
          docker tag  "$APP:aarch64"  "$APP:arm64"

      - name: Get convenience Docker tag suggestions
        id: tags
        uses: meeDamian/tag-suggestions@1.0

      # `simple-qemu:arm64` -> `meedamian/simple-qemu:v4.2.0-arm64-build1`
      # `simple-qemu:arm64` -> `meedamian/simple-qemu:v4.2.0-arm64`
      #
      # `simple-qemu:v4.2.0` -> `meedamian/simple-qemu:v4.2.0-build1`
      # `simple-qemu:v4.2.0` -> `meedamian/simple-qemu:v4.2.0`
      - name: Create :X.Y.Z Docker tags
        run: |
          for tag in $(docker images "$APP" --format "{{.Tag}}" | grep -v "$VERSION"); do
            docker tag  "$APP:$tag"  "$SLUG:$VERSION-$tag-build$BUILD"
            docker tag  "$APP:$tag"  "$SLUG:$VERSION-$tag"
          done

          docker tag  "$APP:$VERSION"  "$SLUG:$VERSION-build$BUILD"
          docker tag  "$APP:$VERSION"  "$SLUG:$VERSION"

      # `simple-qemu:arm64`   -> `meedamian/simple-qemu:v4.2-arm64`
      # `simple-qemu:v4.2.0`  -> `meedamian/simple-qemu:v4.2`
      - name: Create :X.Y manifest
        if: steps.tags.outputs.minor != ''
        run: |
          for tag in $(docker images "$APP" --format "{{.Tag}}" | grep -v "$VERSION"); do
            docker tag  "$APP:$tag"  "$SLUG:${{ steps.tags.outputs.minor }}-$tag"
          done

          docker tag  "$APP:$VERSION"  "$SLUG:${{ steps.tags.outputs.minor }}"

      # `simple-qemu:arm64`   -> `meedamian/simple-qemu:v4-arm64`
      # `simple-qemu:v4.2.0`  -> `meedamian/simple-qemu:v4`
      - name: Create :X manifest
        if: steps.tags.outputs.major != ''
        run: |
          for tag in $(docker images "$APP" --format "{{.Tag}}" | grep -v "$VERSION"); do
            docker tag  "$APP:$tag"  "$SLUG:${{ steps.tags.outputs.major }}-$tag"
          done

          docker tag  "$APP:$VERSION"  "$SLUG:${{ steps.tags.outputs.major }}"

      # `simple-qemu:arm64`   -> `meedamian/simple-qemu:arm64`
      # `simple-qemu:v4.2.0`  -> `meedamian/simple-qemu:latest`
      - name: Create :latest manifest
        if: steps.tags.outputs.latest != ''
        run: |
          for tag in $(docker images "$APP" --format "{{.Tag}}" | grep -v "$VERSION"); do
            docker tag  "$APP:$tag"  "$SLUG:$tag"
          done

          docker tag  "$APP:$VERSION"  "$SLUG:latest"

      - name: List all tagged images
        run: docker images "$SLUG"

      - name: Login to Docker Hub
        env:
          DOCKER_USER: meedamian
        run: |
          echo "Logging in as ${DOCKER_USER}…"
          echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u="$DOCKER_USER" --password-stdin

      - name: Push all images
        run: docker images "$SLUG" --format "{{.Repository}}:{{.Tag}}" | xargs -I % docker push %

      - name: Extract binaries from image
        run: |
          ID="$(docker create "$APP:$VERSION")"
          docker cp "$ID:/usr/local/bin/" ./binaries/
          docker rm "$ID"

          cd binaries/
          gzip -S "-$VERSION.gz" qemu-*-static
          find . ! -name '*.gz' -delete

      - name: Create & print SHA256SUMS file
        run: |
          (cd docker-images;  sha256sum *) >> ./SHA256SUMS
          (cd binaries;       sha256sum *) >> ./SHA256SUMS
          cat ./SHA256SUMS

      - name: Upload binaries to Github Release
        uses: meeDamian/github-release@2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ env.VERSION }}
          body: |
            This release takes `qemu` binaries to be on par with https://github.com/qemu/qemu/releases/tag/${{ env.VERSION }}
          gzip: false
          files: >
            docker-images/*
            binaries/*
            SHA256SUMS


# TODO: broken; see: https://github.com/docker/hub-feedback/issues/1927
#      - name: Sync README.md and Description to Docker Hub
#        uses: meeDamian/sync-readme@v1.0.5
#        with:
#          pass: ${{ secrets.DOCKER_TOKEN }}
#          description: true
