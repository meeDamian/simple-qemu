name: Build & deploy qemu

on: push

jobs:
  build:
    name: Build all images & upload them as build artifacts
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1.0.0

    - name: Extract essence from built-architectures.txt
      run: sed -i  -e 's/\s*#.*$//'  -e '/^\s*$/d'  ./built-architectures.txt

    - name: Build base image
      run: >
        DOCKER_BUILDKIT=1 docker build .
        --build-arg QEMU_VERSION=v4.1.0
        --tag       midstate
        --file      Dockerfile
        --target    builder

    - name: Build :enable image
      run: >
        DOCKER_BUILDKIT=1 docker build .
        --build-arg QEMU_VERSION=v4.1.0
        --tag       ${GITHUB_REPOSITORY,,}:enable
        --file      Dockerfile
        --target    enable

    - name: Build :<single-arch> images
      run: |
        for arch in $(cat built-architectures.txt); do
          echo "${arch}"
          DOCKER_BUILDKIT=1 docker build . \
            --build-arg QEMU_VERSION=v4.1.0 \
            --build-arg ARCH=${arch} \
            --tag       ${GITHUB_REPOSITORY,,}:${arch} \
            --file      Dockerfile \
            --target    single
        done

    - name: Build :latest image
      run: >
        DOCKER_BUILDKIT=1 docker build .
        --build-arg QEMU_VERSION=v4.1.0
        --tag       ${GITHUB_REPOSITORY,,}:latest
        --file      Dockerfile
        --target    latest

    - name: List all built images
      run: docker images ${GITHUB_REPOSITORY,,}

    - name: Save all images to .tgz files
      run: |
        mkdir -p images/
        for image in $(docker images ${GITHUB_REPOSITORY,,} --format "{{.Repository}}:{{.Tag}}"); do
          FILENAME="$(echo "${image}" | tr /: -)"
          docker save "${image}" | gzip > "images/${FILENAME}.tgz"
        done

    - name: Upload built images
      uses: actions/upload-artifact@v1.0.0
      with:
        name: images
        path: images/

    - name: Extract qemu binaries from built image
      run: |
        mkdir -p binaries/
        ID=$(docker create midstate)
        docker cp  "${ID}:/binaries/"  .
        docker rm "${ID}"
        gzip binaries/*

    - name: Upload built binaries
      uses: actions/upload-artifact@v1.0.0
      with:
        name: binaries
        path: binaries/


  # TODO: add a test job that tries to run some simple, and a bit more involved things on containers with emulated architecture


  # TODO: add on-tag conditional
  github-release:
    name: Create Github Release. Only after successful build of a pushed git tag
    runs-on: ubuntu-18.04
    needs: build
    steps:
    - uses: actions/download-artifact@v1.0.0
      with:
        name: binaries

    - run: ls -la binaries/

    - name: Job implementation not finished
      run: exit 1


  # TODO: add on-tag conditional to every stepâ€¦
  #   if: startsWith(github.ref, 'refs/tags/')
  docker-hub:
    name: Tag & deploy to Docker Hub.  Only after successful build of a pushed git tag

    runs-on: ubuntu-18.04
    needs: build
    steps:
    - uses: actions/checkout@v1.0.0

    - name: Download all build artifacts
      uses: actions/download-artifact@v1.0.0
      with:
        name: images

    - name: Load images to local Docker registry
      run: |
        for file in $(ls images/); do
          docker load -i "images/${file}"
        done
        docker images ${GITHUB_REPOSITORY,,}

    - name: Print Docker version
      run: docker version

    - name: Login to Docker Hub registry
      run: echo "${{ secrets.DOCKER_PASS }}" | docker login -u="${{ secrets.DOCKER_USER }}" --password-stdin

    - name: Job implementation not finished
      run: exit 1

    - name: Sync README.md and description with Docker Hub
      uses: meeDamian/sync-readme@v1.0.5
      with:
        pass: ${{ secrets.DOCKER_PASS }}
        description: true
