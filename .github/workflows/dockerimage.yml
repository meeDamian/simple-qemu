name: Build & deploy qemu

on: push

jobs:
  build:
    name: Builds all images
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1

    - name: Remove fluff from built-architectures.txt
      run: grep -o '^[^#]*' ./built-architectures.txt | awk NF | tr -d ' ' > ./built-architectures.txt

    - name: Build base image
      run: >
        DOCKER_BUILDKIT=1 docker build .
        --build-arg QEMU_VERSION=v4.1.0
        --tag       _builder
        --file      Dockerfile
        --target    builder

    - name: Build :enable
      run: >
        DOCKER_BUILDKIT=1 docker build .
        --build-arg QEMU_VERSION=v4.1.0
        --tag       ${GITHUB_REPOSITORY,,}:enable
        --file      Dockerfile
        --target    enable

    - name: Build :<single-arch>
      run: |
        for arch in $(cat built-architectures.txt); do
          DOCKER_BUILDKIT=1 docker build . \
            --build-arg QEMU_VERSION=v4.1.0 \
            --build-arg ARCH=${arch} \
            --tag       ${GITHUB_REPOSITORY,,}:${arch} \
            --file      Dockerfile \
            --target    single
        done

    - name: Build :latest
      run: >
        DOCKER_BUILDKIT=1 docker build .
        --build-arg QEMU_VERSION=v4.1.0
        --tag       ${GITHUB_REPOSITORY,,}:latest
        --file      Dockerfile
        --target    latest

    - name: List all
      run: docker images ${GITHUB_REPOSITORY,,}

    - name: Save all images
      run: |
        mkdir -p containers/
        for container in $(docker images ${GITHUB_REPOSITORY,,} --format "{{.Repository}}:{{.Tag}}"); do
          docker save "${container}" | gzip > containers/${container}.tgz
        done

#        mkdir -p qqq/
#        docker images ${GITHUB_REPOSITORY,,} --format "{{.Repository}}:{{.Tag}}" | xargs -I % docker save % | gzip > qqq/%.tgz

    - name: Upload containers
      uses: actions/upload-artifact@v1.0.0
      with:
        name: containers
        path: containers/

    - name: Extract all built binaries from image
      run: |
        ID=$(docker create "${GITHUB_REPOSITORY,,}:_builder")
        docker cp  "${ID}:/binaries/"  binaries/
        docker rm "${ID}"

    - name: Upload binaries
      uses: actions/upload-artifact@v1.0.0
      with:
        name: binaries
        path: binaries/


#  docker-hub:
#    name: Performs meta stuff
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#    - uses: actions/checkout@v1
#   # NOTE: Does not work until https://github.com/peter-evans/dockerhub-description/issues/1 is addressed
#    - name: Sync README.md with Docker Hub
#      uses: peter-evans/dockerhub-description@v1.0.1
#      env:
#        DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USER }}
#        DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASS }}
#        DOCKERHUB_REPOSITORY: ${GITHUB_REPOSITORY,,}
#    - uses: ./.github/sync-readme
#      with:
#        username: ${{ secrets.DOCKER_USER }}
#        password: ${{ secrets.DOCKER_PASS }}
#    - run: echo "All done"


