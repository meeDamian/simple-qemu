name: Qemu perf (Berkeley DB)

env:
  APP: berkeleydb

on:
  push:
    branches: [ 'perf' ]
  schedule:
    - cron: '3 3 * * 3'

jobs:
  build:
    name: Build & measure time
    runs-on: ubuntu-18.04

    env:
      DOCKER_BUILDKIT: 1
      QEMU: meedamian/simple-qemu
      REPO: lncm/docker-berkeleydb

    strategy:
      fail-fast: false
      matrix:
        qemu:
          - os
          - v5.0.0
          - v4.2.1
          - v4.1.1
          - v4.0.1
          - v3.1.1

        arch:
          - arm32v7
          - arm64v8

        include:
          - qemu: metal

    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ env.REPO }}
          fetch-depth: 1

      - name: Log start time & git-hash
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          VARIANT="${{ matrix.qemu }}${ARCH:+-}$ARCH"
          echo ::set-env name=VARIANT::"$VARIANT"

          mkdir -p stat
          echo "$(git rev-parse HEAD)" | tee "stat/$VARIANT-commit"

      - name: Install & register OS qemu
        if: matrix.qemu == 'os'
        run: |
          sudo apt-get update || true
          sudo apt-get install -y qemu-user-static

          for arch in arm aarch64; do
            "qemu-$arch-static" -version | sed -nE 's|qemu-([^ ]+) version ([^ ]+).*|\2 \1|p' | tee -a stat/os-qemu
          done

          volume() { printf '%s:%s' "/usr/bin/qemu-$1-static" "/usr/local/bin/qemu-$1-static" ;}

          docker run --rm \
            --privileged  \
            --volume "$(volume aarch64):ro" \
            --volume "$(volume arm):ro"     \
            meedamian/simple-qemu:enable    \
              --reset \
              --persistent yes

      - name: Register ${{ env.QEMU }}
        if: matrix.qemu != 'os' && matrix.qemu != 'metal'
        run: docker run --rm --privileged "$QEMU:$VARIANT" --reset  --persistent yes

      - name: Build container
        env:
          ARCH: ${{ matrix.arch }}
        run: docker build ${ARCH:+--build-arg="ARCH=$ARCH"}  .


      - name: Calculate execution time
        env:
          MIN:    60
          HOUR: 3600
          DAY: 86400
          ARCH: ${{ matrix.arch }}
        run: |
          NOW=$(date +%s)
          START=$(date -r stat/ +%s)

          diff=$((NOW - START))

          secs=$((   diff          % 60))
          mins=$(($((diff / MIN )) % 60))
          hrs=$(( $((diff / HOUR)) % 24))
          days=$((   diff / DAY ))

          [ "$days" = "0" ] && days=
          [ "$hrs"  = "0" ] && hrs=

          mkdir -p stat

          echo "$days${days:+d }$hrs${hrs:+h:}${mins}m:${secs}s" | tee "stat/$VARIANT-duration"

      - name: Save execution time as an artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: stats
          path: stat/

  comment:
    name: Report result

    needs: build
    runs-on: ubuntu-18.04

    steps:
      - name: Download perf stats
        uses: actions/download-artifact@v1.0.0
        with:
          name: stats

      - name: Aggregate results
        run: |
          ls -la stats/
          cat stats/*

          (
            cd stats
            printf "Baseline: %s\n\n" "$(cat metal)"

            echo '| version | arm32v7 | arm64v8'
            echo '|:-------:|--------:|--------:'

            for ver in $(ls v* os* | cut -d- -f1 | uniq); do
              a32="$(cat "$ver-arm32v7")"
              a64="$(cat "$ver-arm64v8")"

              if [ "$ver" = "os" ]; then
                ver="os/$(cat os-qemu)"
              fi

              printf '| **%s** | %s | %s' "$ver" "$a32" "$a64" | tr -d '\n'
              echo
            done
          ) | tee all-stats

          echo ::set-env name=RESULTS::"$(cat all-stats | sed -z 's/\n/\\n/g')"

#      - uses: actions/github-script@0.8.0
#        with:
#          github-token: ${{ secrets.GITHUB_TOKEN_NOEXPIRE }}
#          script: |
#            github.issues.createComment({
#              owner: 'lncm',
#              repo: 'docker-bitcoind',
#              issue_number: 9,
#              body: `Today's results:\n\n${process.env.RESULTS.replace(/\\n/g, '\n')}`
#            })
