name: Perf test (Bitcoin Core)

env:
  REPO: lncm/docker-bitcoind
  APP: bitcoind
  MINOR: '0.20'

on:
  push:
    branches: [ 'perf' ]
  schedule:
    - cron: '4 4 * * 4'

jobs:
  build:
    name: Build
    runs-on: ubuntu-18.04

    env:
      DOCKER_BUILDKIT: 1
      QEMU: meedamian/simple-qemu

    strategy:
      fail-fast: false
      matrix:
        qemu:
          - os
          - master
          - v5.0.0
          - v4.2.1
#          - v4.1.1 # Bitcoind builds for long enough.
#          - v4.0.1 #  only build latest of each MAJOR qemu
          - v3.1.1

        arch:
          - arm32v7
          - arm64v8

        include:
          - qemu: metal

    steps:
      - uses: actions/checkout@v2
        with:
          path: ${{ env.APP }}
          repository: ${{ env.REPO }}

      - uses: actions/checkout@v2
        with:
          path: simple-qemu

      - name: Create VARIANT env var
        env:
          ARCH: ${{ matrix.arch }}
        run: echo ::set-env name=VARIANT::"${{ matrix.qemu }}${ARCH:+-}$ARCH"

      # Has to happen before time start
      - name: Build simple-qemu master
        if: matrix.qemu == 'master'
        run: docker build --target comprehensive --tag "$QEMU:$VARIANT" simple-qemu/

      - name: Log start time & git-hash
        env:
          CHECK_FILE: simple-qemu/scripts/perf-sanity-${{ env.APP }}.sh
        run: |
          mkdir -p stat

          (cd "$APP"; git rev-parse HEAD) | tee "stat/$VARIANT-commit"

          if [ -f "$CHECK_FILE" ]; then
            echo ::set-env name=SANITY_CHECK::"$CHECK_FILE"
          fi


      - name: Install & register OS's qemu-user-static
        if: matrix.qemu == 'os'
        run: |
          echo "::group::Install"
          sudo apt-get update || true
          sudo apt-get install -y qemu-user-static
          echo ::endgroup::

          for arch in arm aarch64; do
            "qemu-$arch-static" -version | sed -nE 's|qemu-([^ ]+) version ((\.?[0-9]*)+).*|\2 \1|p' | tee -a stat/os-qemu
          done

          echo "::group::Register"
          volume() {
            printf '%s:%s'  "/usr/bin/qemu-$1-static"  "/usr/local/bin/qemu-$1-static"
          }

          docker run --rm  \
            --privileged   \
            --volume "$(volume aarch64):ro" \
            --volume "$(volume arm):ro"     \
            "$QEMU:enable" \
              --reset      \
              --persistent yes
          echo ::endgroup::

      - name: Register simple-qemu
        if: matrix.qemu != 'os' && matrix.qemu != 'metal'
        run: |
          docker run --rm \
            --privileged  \
            "$QEMU:$VARIANT" \
              --reset        \
              --persistent yes

      - name: Build container
        env:
          ARCH: ${{ matrix.arch }}
        run: docker build ${ARCH:+--build-arg="ARCH=$ARCH"}  --tag="$APP"  "$APP/$MINOR/"

      - name: Make sure binaries can be run
        if: env.SANITY_CHECK
        run: ./"$SANITY_CHECK"

      - name: Calculate execution time
        env:
          MIN:    60
          HOUR: 3600
          DAY: 86400
        run: |
          NOW=$(date +%s)
          START=$(date -r stat/ +%s)

          diff=$((NOW - START))

          secs=$((   diff          % 60))
          mins=$(($((diff / MIN )) % 60))
          hrs=$(( $((diff / HOUR)) % 24))
          days=$((   diff / DAY ))

          [ "$days" = "0" ] && days=
          [ "$hrs"  = "0" ] && hrs=

          duration="$(printf '%s%s%02dm:%02ds' "$days${days:+d }"  "$hrs${hrs:+h:}" "$mins" "$secs")"
          echo "${duration#0}" | tee "stat/$VARIANT-duration"

      - name: Handle if failure
        if: failure()
        run: mkdir -p stat && echo FAIL > "stat/$VARIANT-duration"

      - name: Save execution time as an artifact
        uses: actions/upload-artifact@v1.0.0
        if: always()
        with:
          name: stats
          path: stat/

  comment:
    name: Report result
    runs-on: ubuntu-18.04

    needs: build
    if: always()

    steps:
      - name: Download perf stats
        uses: actions/download-artifact@v1.0.0
        with:
          name: stats

      - name: Aggregate results
        run: |
          (
            cd stats

            line() { printf '|%-14s|%12s|%12s\n' "$1" "$2" "$3" ;}
            row()  { line " ${1:--} " " ${2:--} " " ${3:--} " ;}
            result() {
              os_ver=
              if [ "$1" = "os" ]; then
                os_ver="os/v$(grep -Eo '(\.?[0-9]*){3}' os-qemu | head -n1)"
              fi

              row "**${os_ver:-$1}**" "$(cat "$1-arm32v7-duration")" "$(cat "$1-arm64v8-duration")"
            }

            COMMIT="$(sort -u *-commit | head -n1)"

            printf '### Perf check (%s)\n\n' "$APP"
            printf 'Source: [`%s@%s`](https://github.com/%s/tree/%s)\n' "$REPO" "$COMMIT" "$REPO" "$COMMIT"
            printf 'Trigger: %s\n' "${{ github.event_name }}"
            printf "Baseline: %s (no emulation)\n\n" "$(cat metal-duration)"

            row    qemu  arm32v7  arm64v8
            line   ----  ------:  ------: | tr ' ' -

            result os
            result master
            for ver in v*duration; do
              result "${ver%%-*}"
            done

            echo
          ) | tee all-stats

          echo ::set-env name=RESULTS::"$(sed -z 's/\n/\\n/g' all-stats)"

      - uses: actions/github-script@v2
        with:
          github-token: ${{ secrets.GH_TOKEN_NOEXPIRE }}
          script: |
            github.issues.createComment({
              issue_number: 15,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${process.env.RESULTS.replace(/\\n/g, '\n')}`
            })
