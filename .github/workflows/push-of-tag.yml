name: Build & deploy qemu on a git tag push

# WARNING: DO NOT EDIT THIS FILE!
#
# This file is autogenerated using `scripts/generate-workflows.sh`, and all changes to it will be lost.
#   All workflows are located in `.github/templates/`.  Workflows must not start with an underscore.
#       All jobs (re-)used in workflows must be located in the same directory, and must start with an underscore.
#       Indentation of all parts is preserved, so it must be correct.
#

on:
  push:
    tags:
      - '*'

jobs:
  build:
    name: Build all images & upload them as build artifacts
    env:
      DOCKER_BUILDKIT: 1

    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v1.0.0

      # NOTE: This is also handled within Dockerfile, we *also* do it here,
      #         because of the step building single-arch images below.
      - name: Extract essence from built-architectures.txt
        run: sed -i  -e 's/\s*#.*$//'  -e '/^\s*$/d'  ./built-architectures.txt

      - name: Build base image
        run: >
          docker build .
          --build-arg QEMU_VERSION=v4.2.0
          --tag       midstate
          --target    builder

      - name: Build :enable image
        run: >
          docker build .
          --build-arg QEMU_VERSION=v4.2.0
          --tag       simple-qemu:enable
          --target    enable

      - name: Build :<single-arch> images
        run: |
          for arch in $(cat built-architectures.txt); do
            echo "Building simple-qemu:${arch}…"
            docker build . \
              --build-arg QEMU_VERSION=v4.2.0 \
              --build-arg ARCH=${arch} \
              --tag       simple-qemu:${arch} \
              --target    single
          done

      - name: Build :v4.2.0 (all-included) image
        run: >
          docker build .
          --build-arg QEMU_VERSION=v4.2.0
          --tag       simple-qemu:v4.2.0
          --target    comprehensive

      - name: List all built images
        run: docker images simple-qemu

      - name: Save all images to .tgz files
        run: |
          mkdir -p images/
          for image in $(docker images simple-qemu --format "{{.Repository}}:{{.Tag}}"); do
            FILENAME="$(echo "${image}" | tr : -)"
            docker save "${image}" | gzip > "images/${FILENAME}.tgz"
          done

      - name: Print sha256sum of all images
        run: sha256sum images/*

      - name: Upload built images
        uses: actions/upload-artifact@v1.0.0
        with:
          name: images
          path: images/

      - name: Extract qemu binaries from built image
        run: |
          mkdir -p binaries/
          ID=$(docker create midstate)
          docker cp  "${ID}:/binaries/"  .
          docker rm "${ID}"
          gzip -S "-v4.2.0.gz" binaries/*

      - name: Print sha256sum of all binaries
        run: sha256sum binaries/*

      - name: Upload built binaries
        uses: actions/upload-artifact@v1.0.0
        with:
          name: binaries
          path: binaries/

  test:
    name: Test if running arch-specific images works
    runs-on: ubuntu-18.04
    needs: build
    strategy:
      matrix:
        arch:
          - arm
          - aarch64
#          - riscv32 # Nothing to test it against…
          - riscv64
    steps:
      - uses: actions/checkout@v1

      - name: Download all build artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: images

      - name: Print sha256sum of all images
        run: sha256sum images/*

      - name: Load relevant image locally
        run: docker load -i "images/simple-qemu-${{matrix.arch}}.tgz"

      - name: Enable emulation
        run: docker run --rm --privileged "simple-qemu:${{matrix.arch}}" -p yes

      - name: Try to run arch-specific image
        run: |
          IMAGE="${{matrix.arch}}/alpine"

          if [[ "${{matrix.arch}}" == "riscv64" ]]; then
            IMAGE="carlosedp/debian:sid-riscv64"
          fi

          if [[ "${{matrix.arch}}" == "arm" ]]; then
            IMAGE="arm32v7/alpine"
          fi

          docker run ${IMAGE} uname -a

      - name: Verify that git tag build is the same as used for build
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          GIT_VER="$(echo ${GITHUB_REF} | awk -F/ '{print $NF}')"

          if [ "${GIT_VER}" != "v4.2.0" ]; then
            printf "\nVersion mismatch!  Tagged as %s, while file claims %s\n\n" "${GIT_VER}" "v4.2.0"
            exit 1
          fi

  docker-hub-push:
    name: Tag & deploy to Docker Hub.  Only after successful build, and test of a pushed git tag

    runs-on: ubuntu-18.04
    needs: test
    steps:
      - uses: actions/checkout@v1.0.0

      - name: Print Docker version
        run: docker version

      - name: Download all build artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: images

      - name: Print sha256sum of all images
        run: sha256sum images/*

      - name: Load images locally
        run: ls images/ | xargs -I % docker load -i "images/%"

      - name: Setup environment
        run: |
          echo ::set-env name=DOCKER_USER::"${GITHUB_ACTOR,,}"
          echo ::set-env name=DOCKER_SLUG::"${GITHUB_REPOSITORY,,}"

      - name: Version-tag all images
        run: >
          ./scripts/docker-hub-tag.sh \
            simple-qemu \
            "${DOCKER_SLUG}" \
            "v4.2.0" \
            "enable arm:arm32v7 aarch64:arm64 riscv32 riscv64"

      - name: List all tagged images
        run: docker images "${DOCKER_SLUG}"

      - name: Login to Docker Hub
        run: echo "${{secrets.DOCKER_TOKEN}}" | docker login -u="${DOCKER_USER}" --password-stdin

      - name: Push all images
        run: docker images "${DOCKER_SLUG}" --format "{{.Repository}}:{{.Tag}}" | xargs -I % docker push %

      - name: Sync README.md and Description to Docker Hub
        uses: meeDamian/sync-readme@v1.0.5
        with:
          pass: ${{secrets.DOCKER_TOKEN}}
          description: true

  github-registry-push:
    name: Tag & deploy to Github Registry.  Only after successful build, and test of a pushed git tag

    runs-on: ubuntu-18.04
    needs: test
    steps:
      - uses: actions/checkout@v1.0.0

      - name: Print Docker version
        run: docker version

      - name: Download all build artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: images

      - name: Print sha256sum of all images
        run: sha256sum images/*

      - name: Load images locally
        run: ls images/ | xargs -I % docker load -i "images/%"

      - name: Version-tag all images
        run: >
          ./scripts/github-registry-tag.sh \
            simple-qemu \
            "docker.pkg.github.com/meedamian/simple-qemu" \
            "v4.2.0" \
            "enable arm:arm32v7 aarch64:arm64 riscv32 riscv64"

      - name: List all tagged images
        run: docker images "docker.pkg.github.com/meedamian/simple-qemu/*"

      # NOTE: Temporarily disabled, since it's just borked…
#      - name: Login to Github Registry
#        run: echo "${{secrets.YET_ANOTHER_GITHUB_TOKEN}}" | docker login docker.pkg.github.com -u="${GITHUB_ACTOR,,}" --password-stdin

#      - name: Push all images
#        run: docker images "docker.pkg.github.com/meedamian/simple-qemu/*" --format "{{.Repository}}:{{.Tag}}" | xargs -I % docker push %

  github-release:
    name: Create Github Release. Only after successful build of a pushed git tag
    runs-on: ubuntu-18.04
    needs: test
    steps:
      - name: Download binaries from build artifacts
        uses: actions/download-artifact@v1.0.0
        with:
          name: binaries

      - name: Print checksums of binaries for future reference
        run: sha256sum binaries/*

      - name: Upload binaries to Github Release
        uses: meeDamian/github-release@v1.0.0
        with:
          token: ${{secrets.GITHUB_TOKEN}}
          body: This release takes `qemu` binaries to be on par with https://github.com/qemu/qemu/releases/tag/v4.2.0
          gzip: false
          files: binaries/*
